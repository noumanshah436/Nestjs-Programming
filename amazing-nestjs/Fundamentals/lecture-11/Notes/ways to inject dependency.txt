Topics covered

✱ Standard Providers
✱ @Injectable decorator
✱ Constructor Injection
✱ @Inject decorator
✱ @Optional decorator
✱ useClass
✱ useExisting


different ways to inject dependency;

1)
providers: [
    // Same Name provider - where Injection token, and Dependency name is same
    UsersStore,

    // NOTE: above statement is the shorthand syntax of below line
    // provide is the injection token , useClass = which class to use 
    // { provide: UsersStore, useClass: UsersStore }
],

constructor(private store: UsersStore) {    
    // here UsersStore is the injection-token that provide UsersStore class
    console.log(this.store);
}

2) we can use Inject that works same as above
constructor(@Inject(UsersStore) private store: UsersStore) {
    console.log("[UsersController]:", this.store.getStore());
}

3) works same as above
constructor(@Inject(UsersStore) private store: any) {    // as we are giving type in Inject
    console.log("[UsersController]:", this.store.getStore());
}

4) Provider should be registered in the module, else it throw error if we try to inject it.
We can tackle this error without register that provider by using Optional decorator.

constructor(@Optional() private store: UsersStore) {
    console.log("[UsersController]:", this.store.getStore());
}

but store remain undefined.

5) we can use diffent token name for a class

providers: [
    // token name = `STORE` & dependency = `UsersStore`
    { provide: "STORE", useClass: UsersStore },
],

constructor(@Inject("STORE") private store: UsersStore) {  // for string-token we need to use Inject decorator
    console.log(this.store);
}

6) use different names for same class (but use same instance)
providers: [
    UsersStore,
    { provide: PersonStore, useExisting: UsersStore },
],

constructor(
    private userStore: UsersStore,         // would inject `UserStore`
    private existingUserStore: PersonStore // would inject existing instance of  `UserStore`
) 
{}

7) create two instances of same class 

providers: [
    UsersStore, // instance 1

    // if we use `useClass` instead of `useExisting` then two instance of `UsersStore` will be created
    // NOTE: in this case no cached or shared instance of `UsersStore` is used
    // a new one is created that is instance 2

    { provide: PersonStore, useClass: UsersStore },
],

constructor(
    private userStore1: UsersStore, // would inject `UserStore` instance 1
    private userStore2: PersonStore // would inject separate instance of  `UserStore` that is instance 2
) 
{}